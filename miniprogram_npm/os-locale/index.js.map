{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nconst execa = require('execa');\nconst lcid = require('lcid');\nconst mem = require('mem');\n\nconst defaultOpts = {spawn: true};\nconst defaultLocale = 'en_US';\n\nfunction getEnvLocale(env) {\n\tenv = env || process.env;\n\treturn env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;\n}\n\nfunction parseLocale(x) {\n\tconst env = x.split('\\n').reduce((env, def) => {\n\t\tdef = def.split('=');\n\t\tenv[def[0]] = def[1].replace(/^\"|\"$/g, '');\n\t\treturn env;\n\t}, {});\n\treturn getEnvLocale(env);\n}\n\nfunction getLocale(str) {\n\treturn (str && str.replace(/[.:].*/, ''));\n}\n\nfunction getAppleLocale() {\n\treturn execa.stdout('defaults', ['read', '-g', 'AppleLocale']);\n}\n\nfunction getAppleLocaleSync() {\n\treturn execa.sync('defaults', ['read', '-g', 'AppleLocale']).stdout;\n}\n\nfunction getUnixLocale() {\n\tif (process.platform === 'darwin') {\n\t\treturn getAppleLocale();\n\t}\n\n\treturn execa.stdout('locale')\n\t\t.then(stdout => getLocale(parseLocale(stdout)));\n}\n\nfunction getUnixLocaleSync() {\n\tif (process.platform === 'darwin') {\n\t\treturn getAppleLocaleSync();\n\t}\n\n\treturn getLocale(parseLocale(execa.sync('locale').stdout));\n}\n\nfunction getWinLocale() {\n\treturn execa.stdout('wmic', ['os', 'get', 'locale'])\n\t\t.then(stdout => {\n\t\t\tconst lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n\t\t\treturn lcid.from(lcidCode);\n\t\t});\n}\n\nfunction getWinLocaleSync() {\n\tconst stdout = execa.sync('wmic', ['os', 'get', 'locale']).stdout;\n\tconst lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n\treturn lcid.from(lcidCode);\n}\n\nmodule.exports = mem(opts => {\n\topts = opts || defaultOpts;\n\tconst envLocale = getEnvLocale();\n\tlet thenable;\n\n\tif (envLocale || opts.spawn === false) {\n\t\tthenable = Promise.resolve(getLocale(envLocale));\n\t} else if (process.platform === 'win32') {\n\t\tthenable = getWinLocale();\n\t} else {\n\t\tthenable = getUnixLocale();\n\t}\n\n\treturn thenable.then(locale => locale || defaultLocale)\n\t\t.catch(() => defaultLocale);\n});\n\nmodule.exports.sync = mem(opts => {\n\topts = opts || defaultOpts;\n\tconst envLocale = getEnvLocale();\n\tlet res;\n\n\tif (envLocale || opts.spawn === false) {\n\t\tres = getLocale(envLocale);\n\t} else {\n\t\ttry {\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tres = getWinLocaleSync();\n\t\t\t} else {\n\t\t\t\tres = getUnixLocaleSync();\n\t\t\t}\n\t\t} catch (err) {}\n\t}\n\n\treturn res || defaultLocale;\n});\n"]}